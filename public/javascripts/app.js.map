{"version":3,"file":"public\\javascripts\\app.js","sources":["app/assets/javascripts/md_service.coffee","app/assets/javascripts/md_table.coffee","app/assets/javascripts/md_websocket.coffee"],"names":[],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nangular.module('mdtable.service', [])\r\n\r\n.factory( 'mdService', [ ->\r\n  #TODO: think about immutability\r\n\r\n  _columnGroupMap = {}\r\n\r\n  _columns     = []\r\n\r\n  _data = {}\r\n\r\n  _delimiter   = '_'\r\n\r\n  fullColumnName = (columnName, columnGroup) -> columnGroup + _delimiter + columnName\r\n\r\n  addColumnFunc = (column, columnGroup) ->\r\n    _columns.push( groupName: columnGroup, columnName: columnGroup + _delimiter + column, displayName: column )\r\n\r\n  addColumnGroupFunc = ( groupName, span ) ->\r\n    _columnGroupMap[ groupName ] = groupName: groupName, displayName: groupName, span: span\r\n\r\n  getRowFunc  = (primaryKey) ->\r\n    row       = _data[ primaryKey ]\r\n    converted = {}\r\n    for columnName, map of row\r\n      converted[columnName] = map.value\r\n    return converted\r\n\r\n  getDataFunc = ->\r\n    tableData = {}\r\n    for primaryKey of _data\r\n      tableData[ primaryKey ] = getRowFunc( primaryKey )\r\n    return tableData\r\n\r\n  updateFieldFunc = (primaryKey, columnGroup, columnName, fieldValue) ->\r\n    if primaryKey of _data\r\n      _data[primaryKey][fullColumnName(columnName, columnGroup)] = groupName: columnGroup, fieldName: columnName, value: fieldValue\r\n    else\r\n      _data[primaryKey] = {}\r\n      _data[primaryKey][fullColumnName(columnName, columnGroup)] = groupName: columnGroup, fieldName: columnName, value: fieldValue\r\n\r\n  bestBidGroupFunc = (row) ->\r\n    bestGroup = ''\r\n    bestValue = 0\r\n    for key, map of row when ( map.fieldName is 'bid' and map.groupName isnt 'best' )\r\n      if( bestGroup == '' || bestValue < map.value )\r\n        bestValue = map.value #best bid is largest\r\n        bestGroup = map.groupName\r\n    return bestGroup\r\n\r\n  bestAskGroupFunc = (row) ->\r\n    bestGroup = ''\r\n    bestValue = 0\r\n    for key, map of row when ( map.fieldName is 'ask' and map.groupName isnt 'best' )\r\n      if( bestGroup == '' || bestValue > map.value )\r\n        bestValue = map.value #best ask is smallest\r\n        bestGroup = map.groupName\r\n    return bestGroup\r\n\r\n  return {\r\n    #ColumnGroup API\r\n    getColumnGroups: ->\r\n      columnGroupArray = []\r\n      for key, map of _columnGroupMap\r\n        columnGroupArray.push( map )\r\n      if( columnGroupArray.length > 0 )\r\n        return [ {groupName: 'best', displayName: 'best', span: 4} ].concat( columnGroupArray )\r\n      else\r\n        return []\r\n    addColumnGroup: addColumnGroupFunc\r\n\r\n    #Column API\r\n    getColumns: ->\r\n      if( _columns.length )\r\n        return [\r\n          {groupName: 'best',    columnName: 'best_bidSize',    displayName: 'bidSize'}\r\n          {groupName: 'best',    columnName: 'best_bid',        displayName: 'bid'}\r\n          {groupName: 'best',    columnName: 'best_ask',        displayName: 'ask'}\r\n          {groupName: 'best',    columnName: 'best_askSize',    displayName: 'askSize'}\r\n        ].concat( _columns )\r\n      else\r\n        return []\r\n    addColumn:  addColumnFunc\r\n\r\n    #Data API\r\n    getData:     getDataFunc\r\n    updateField: updateFieldFunc\r\n\r\n    bestBidGroup: bestBidGroupFunc\r\n    bestAskGroup: bestAskGroupFunc\r\n\r\n    #process message API\r\n    processSchemaMessage: (message) ->\r\n      columnGroup = message.data.tableName\r\n      columns     = message.data.columns\r\n      addColumnGroupFunc( columnGroup, columns.length )\r\n      for column in columns\r\n        addColumnFunc( column.columnName, columnGroup )\r\n\r\n    processRowMessage: (message) ->\r\n      pkey      = message.data.primaryKey\r\n      groupName = message.data.tableName\r\n      row       = message.data.rowData\r\n      for columnName, value of row\r\n        updateFieldFunc(pkey, groupName, columnName, value )\r\n      \r\n      bestBidGroup = bestBidGroupFunc( _data[ pkey ] )\r\n      bestAskGroup = bestAskGroupFunc( _data[ pkey ] )\r\n\r\n      entireRow = getRowFunc( pkey )\r\n      updateFieldFunc( pkey, 'best', 'bidSize', entireRow[fullColumnName('bidSize',bestBidGroup )] )\r\n      updateFieldFunc( pkey, 'best', 'bid',     entireRow[fullColumnName('bid',    bestBidGroup )] )\r\n      updateFieldFunc( pkey, 'best', 'ask',     entireRow[fullColumnName('ask',    bestAskGroup )] )\r\n      updateFieldFunc( pkey, 'best', 'askSize', entireRow[fullColumnName('askSize',bestAskGroup )] )\r\n\r\n    }\r\n])\r\n\r\n","'use strict'\r\n\r\nangular.module( 'mdtable', ['mdtable.service', 'mdtable.websocket'] )\r\n\r\n.controller('mdTableController', [ '$scope', 'mdService', 'websocketService', ($scope, mdService, websocketService) ->\r\n  $scope.table =\r\n    columnGroups:  []\r\n    columns:       []\r\n    data:          {}\r\n\r\n  websocketService.registerCallback( 'schema', (message) ->\r\n    mdService.processSchemaMessage( message )\r\n    $scope.$apply( ->\r\n      $scope.table.columns      =  mdService.getColumns()\r\n      $scope.table.columnGroups =  mdService.getColumnGroups()\r\n    )\r\n  )\r\n\r\n  websocketService.registerCallback( 'row', (message) ->\r\n    mdService.processRowMessage( message )\r\n    $scope.$apply( ->\r\n      $scope.table.data = mdService.getData()\r\n    )\r\n  )\r\n\r\n\r\n  $scope.table = {}\r\n\r\n  $scope.table.columnGroups = [\r\n    {groupName: 'best',    displayName: 'Best',     span: 4}\r\n    {groupName: 'market1', displayName: 'Market 1', span: 4}\r\n    {groupName: 'market2', displayName: 'Market 2', span: 4}\r\n  ]\r\n\r\n  $scope.table.columns      = [\r\n    {groupName: 'best',    columnName: 'best_bidSize',    displayName:   'Bid Size'}\r\n    {groupName: 'best',    columnName: 'best_bid',        displayName:   'Bid'}\r\n    {groupName: 'best',    columnName: 'best_ask',        displayName:   'Ask'}\r\n    {groupName: 'best',    columnName: 'best_askSize',    displayName:   'Ask Size'}\r\n    {groupName: 'market1', columnName: 'market1_bidSize', displayName:   'Bid Size'}\r\n    {groupName: 'market1', columnName: 'market1_bid',     displayName:   'Bid'}\r\n    {groupName: 'market1', columnName: 'market1_ask',     displayName:   'Ask'}\r\n    {groupName: 'market1', columnName: 'market1_askSize', displayName:   'Ask Size'}\r\n    {groupName: 'market2', columnName: 'market2_bidSize', displayName:   'Bid Size'}\r\n    {groupName: 'market2', columnName: 'market2_bid',     displayName:   'Bid'}\r\n    {groupName: 'market2', columnName: 'market2_ask',     displayName:   'Ask'}\r\n    {groupName: 'market2', columnName: 'market2_askSize', displayName:   'Ask Size'}\r\n  ]\r\n\r\n  $scope.table.data =\r\n    stockA:\r\n      best_bidSize: 100\r\n      best_bid: 50\r\n      best_ask: 51\r\n      best_askSize: 90\r\n      market1_bidSize: 100\r\n      market1_bid: 50\r\n      market1_ask: 51\r\n      market1_askSize: 90\r\n      market2_bidSize: 80\r\n      market2_bid: 49\r\n      market2_ask: 52\r\n      market2_askSize: 60\r\n    stockB:\r\n      best_bidSize: 1200\r\n      best_bid: 93.5\r\n      best_ask: 94\r\n      best_askSize: 1300\r\n      market1_bidSize: 1200\r\n      market1_bid: 93.5\r\n      market1_ask: 94\r\n      market1_askSize: 1300\r\n      market2_bidSize: 500\r\n      market2_bid: 93.5\r\n      market2_ask: 94.2\r\n      market2_askSize: 600\r\n    stockC:\r\n      best_bidSize: 1000\r\n      best_bid: 1000\r\n      best_ask: 1000.5\r\n      best_askSize: 1000\r\n      market1_bidSize: 1000\r\n      market1_bid: 1000\r\n      market1_ask: 1000.5\r\n      market1_askSize: 1000\r\n    stockD:\r\n      best_bidSize: 3650\r\n      best_bid: 200\r\n      best_ask: 204\r\n      best_askSize: 2200\r\n      market2_bidSize: 3650\r\n      market2_bid: 200\r\n      market2_ask: 204\r\n      market2_askSize: 2200\r\n\r\n])\r\n\r\n\r\n","'use strict'\r\n\r\nangular.module('mdtable.websocket', [])\r\n\r\n.factory( 'websocketService', [ ->\r\n\r\n    registeredCallback = {}\r\n\r\n    processMessage = (message) ->\r\n      if 'messageType' of message\r\n        if message.messageType of registeredCallback\r\n          registeredCallback[message.messageType]( message )\r\n        else\r\n          console.log( 'No callback registered for Message Type = ' + message.messageType  )\r\n      else\r\n        console.log( 'messageType component does not exist in the message = \\n' + message.toString() )\r\n\r\n    connection = new WebSocket(\"ws://localhost:9000/mdwebsocket\")\r\n    connection.onmessage = (message) -> processMessage( message )\r\n\r\n    return {\r\n      processMessage: processMessage\r\n      registerCallback: ( messageType, callback ) -> registeredCallback[ messageType ] = callback\r\n      isCallbackRegestered: ( messageType ) -> messageType of registeredCallback\r\n    }\r\n])\r\n\r\n\r\n\r\n"]}